generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model ExerciseSet {
  id                String          @id(map: "PK_ExerciseSets") @default(uuid()) @db.Uuid
  exerciseWorkoutId String          @db.Uuid
  index             Int
  weight            Decimal?        @db.Decimal(18, 6)
  reps              Decimal?        @db.Decimal(18, 6)
  time              Decimal?        @db.Decimal(18, 6)
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
  note              String?
  exerciseWorkout   ExerciseWorkout @relation(fields: [exerciseWorkoutId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "FK_ExerciseSet_ExerciseWorkout_ExerciseWorkoutId")

  @@index([exerciseWorkoutId], map: "IX_ExerciseSets_ExerciseWorkoutId")
}

model ExerciseWorkout {
  id              String        @id(map: "PK_ExerciseWorkouts") @default(uuid()) @db.Uuid
  workoutId       String        @db.Uuid
  exerciseId      String        @db.Uuid
  totalWeight     Decimal?      @db.Decimal(18, 6)
  totalReps       Decimal?      @db.Decimal(18, 6)
  totalSets       Decimal?      @db.Decimal(18, 6)
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  note            String?
  index           Int           @default(0)
  belongsToUserId String?
  exerciseSets    ExerciseSet[]
  exercise        Exercise      @relation(fields: [exerciseId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "FK_ExerciseWorkouts_Exercises_Exerciseid")
  workout         Workout       @relation(fields: [workoutId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "FK_ExerciseWorkouts_Workouts_WorkoutId")

  @@index([exerciseId], map: "IX_ExerciseWorkouts_ExerciseId")
  @@index([workoutId], map: "IX_ExerciseWorkouts_WorkoutId")
}

model Exercise {
  id               String            @id(map: "PK_Exercises") @default(uuid()) @db.Uuid
  name             String
  muscleGroupId    String            @db.Uuid
  exerciseLogType  Int
  description      String?
  belongsToUserId  String?
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  exerciseWorkouts ExerciseWorkout[]
  muscleGroup      MuscleGroup       @relation(fields: [muscleGroupId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "FK_Exercises_MuscleGroups_MuscleGroupId")

  @@index([muscleGroupId], map: "IX_Exercises_MuscleGroupId")
}

model MuscleGroup {
  id          String      @id(map: "PK_MuscleGroups") @default(uuid()) @db.Uuid
  name        String
  description String?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  exercises   Exercise[]
  workouts    Workout[]
}

model Workout {
  id               String            @id(map: "PK_Workouts") @default(uuid()) @db.Uuid
  name             String
  description      String?
  date             DateTime          @db.Timestamptz(6)
  muscleGroupId    String            @db.Uuid
  totalWeight      Decimal?          @db.Decimal(18, 6)
  totalReps        Decimal?          @db.Decimal(18, 6)
  totalSets        Decimal?          @db.Decimal(18, 6)
  belongsToUserId  String?
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  exerciseWorkouts ExerciseWorkout[]
  muscleGroup      MuscleGroup       @relation(fields: [muscleGroupId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "FK_Workouts_MuscleGroups_MuscleGroupId")

  @@index([muscleGroupId], map: "IX_Workouts_MuscleGroupId")
}

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  emailVerified DateTime?
  image         String?
  password      String?
  accounts      Account[]  
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
 
model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@id([provider, providerAccountId])
}

model VerificationToken {
  id String @id @default(cuid())
  email String
  token String @unique
  expires DateTime

  @@unique([email, token])
}